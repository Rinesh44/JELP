// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

package com.brilltech.jelp.entities;

public final class ErrorsProto {
  private ErrorsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   *These are Base Error Code. Errors are defined more in detail with message.
   * </pre>
   *
   * Protobuf enum {@code brilltech.jelp.entities.ErrorCode}
   */
  public enum ErrorCode
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     *Just default value for enum in proto. Should not be used as error code.
     * </pre>
     *
     * <code>UNKNOWN_ERROR = 0;</code>
     */
    UNKNOWN_ERROR(0),
    /**
     * <pre>
     *When any required input is null.
     * </pre>
     *
     * <code>NPE = 4;</code>
     */
    NPE(4),
    /**
     * <pre>
     *Mostly used with validation check.
     * </pre>
     *
     * <code>ILLEGAL = 5;</code>
     */
    ILLEGAL(5),
    /**
     * <pre>
     *For duplicate records.
     * </pre>
     *
     * <code>DUPLICATE = 6;</code>
     */
    DUPLICATE(6),
    /**
     * <pre>
     *When any action fails. Like while saving record on db
     * </pre>
     *
     * <code>FAILED = 7;</code>
     */
    FAILED(7),
    /**
     * <pre>
     *When records are not found.
     * </pre>
     *
     * <code>NOT_FOUND = 8;</code>
     */
    NOT_FOUND(8),
    /**
     * <pre>
     *For invalid inputs.
     * </pre>
     *
     * <code>INVALID = 9;</code>
     */
    INVALID(9),
    /**
     * <pre>
     *For any runtime exception
     * </pre>
     *
     * <code>EXCEPTION = 10;</code>
     */
    EXCEPTION(10),
    /**
     * <pre>
     *For timeouts on calling any third party services
     * </pre>
     *
     * <code>TIMEOUT = 11;</code>
     */
    TIMEOUT(11),
    /**
     * <pre>
     *If authorization failed
     * </pre>
     *
     * <code>AUTH_ERROR = 12;</code>
     */
    AUTH_ERROR(12),
    /**
     * <pre>
     *If user don't have permission
     * </pre>
     *
     * <code>UNAUTHORIZED = 13;</code>
     */
    UNAUTHORIZED(13),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *Just default value for enum in proto. Should not be used as error code.
     * </pre>
     *
     * <code>UNKNOWN_ERROR = 0;</code>
     */
    public static final int UNKNOWN_ERROR_VALUE = 0;
    /**
     * <pre>
     *When any required input is null.
     * </pre>
     *
     * <code>NPE = 4;</code>
     */
    public static final int NPE_VALUE = 4;
    /**
     * <pre>
     *Mostly used with validation check.
     * </pre>
     *
     * <code>ILLEGAL = 5;</code>
     */
    public static final int ILLEGAL_VALUE = 5;
    /**
     * <pre>
     *For duplicate records.
     * </pre>
     *
     * <code>DUPLICATE = 6;</code>
     */
    public static final int DUPLICATE_VALUE = 6;
    /**
     * <pre>
     *When any action fails. Like while saving record on db
     * </pre>
     *
     * <code>FAILED = 7;</code>
     */
    public static final int FAILED_VALUE = 7;
    /**
     * <pre>
     *When records are not found.
     * </pre>
     *
     * <code>NOT_FOUND = 8;</code>
     */
    public static final int NOT_FOUND_VALUE = 8;
    /**
     * <pre>
     *For invalid inputs.
     * </pre>
     *
     * <code>INVALID = 9;</code>
     */
    public static final int INVALID_VALUE = 9;
    /**
     * <pre>
     *For any runtime exception
     * </pre>
     *
     * <code>EXCEPTION = 10;</code>
     */
    public static final int EXCEPTION_VALUE = 10;
    /**
     * <pre>
     *For timeouts on calling any third party services
     * </pre>
     *
     * <code>TIMEOUT = 11;</code>
     */
    public static final int TIMEOUT_VALUE = 11;
    /**
     * <pre>
     *If authorization failed
     * </pre>
     *
     * <code>AUTH_ERROR = 12;</code>
     */
    public static final int AUTH_ERROR_VALUE = 12;
    /**
     * <pre>
     *If user don't have permission
     * </pre>
     *
     * <code>UNAUTHORIZED = 13;</code>
     */
    public static final int UNAUTHORIZED_VALUE = 13;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ErrorCode valueOf(int value) {
      return forNumber(value);
    }

    public static ErrorCode forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_ERROR;
        case 4: return NPE;
        case 5: return ILLEGAL;
        case 6: return DUPLICATE;
        case 7: return FAILED;
        case 8: return NOT_FOUND;
        case 9: return INVALID;
        case 10: return EXCEPTION;
        case 11: return TIMEOUT;
        case 12: return AUTH_ERROR;
        case 13: return UNAUTHORIZED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ErrorCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
            public ErrorCode findValueByNumber(int number) {
              return ErrorCode.forNumber(number);
            }
          };

    private final int value;

    private ErrorCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brilltech.jelp.entities.ErrorCode)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
